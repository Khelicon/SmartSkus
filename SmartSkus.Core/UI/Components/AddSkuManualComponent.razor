@using SmartSkus.Core.Local.Models;

<Validations @ref="validations" Mode="ValidationMode.Manual">
    <Validation Validator="ValidateSku">
        <Field Margin=Margin.Is0.Is2.FromTop>
            <FieldLabel Margin=Margin.Is0>@Localizer["Item Name"]:</FieldLabel>
            <TextEdit @bind-Text="@AppModelObject.SkuModelDtoObject.ItemName">
                <Feedback>
                    <ValidationError>Item Name should more than 2 characters.</ValidationError>
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>

    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field>
            <FieldLabel Margin=Margin.Is0>@Localizer["Description"]:</FieldLabel>
            <TextEdit @bind-Text="@AppModelObject.SkuModelDtoObject.Description">
                <Feedback>
                    <ValidationError>Description is Required</ValidationError>
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>

    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field>
            <FieldLabel Margin=Margin.Is0>@Localizer["Attribute1"]:</FieldLabel>
            <TextEdit @bind-Text="@AppModelObject.SkuModelDtoObject.Attribute1">
                <Feedback>
                    <ValidationError>Atleast one Attribute is Required</ValidationError>
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>

    <Field>
        <FieldLabel Margin=Margin.Is0>@Localizer["Attribute2"]:</FieldLabel>
        <TextEdit @bind-Text="@AppModelObject.SkuModelDtoObject.Attribute2" />

        <FieldLabel Margin=Margin.Is0>@Localizer["Attribute3"]:</FieldLabel>
        <TextEdit @bind-Text="@AppModelObject.SkuModelDtoObject.Attribute3" />

        <Button Color=Color.Primary Size="Size" Block=true Margin=Margin.Is2.FromTop @onclick=AddSkuModel>
            @Localizer["Add Sku"]
        </Button>

    </Field>
</Validations>

@code {
    Validations? validations;

    void ValidateSku(ValidatorEventArgs e)
    {
        var sku = Convert.ToString(e.Value);
        if (sku.Length < 2)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
}

@code
    {
        #region Variables

        #region Parameter

        [Parameter]
        public AppModel AppModelObject { get; set; } = null!;

        [Parameter]
        public EventCallback<AppModel> AppModelObjectChanged { get; set; }

        [Parameter]
        public SettingsModel Settings { get; set; } = null!;

        [Parameter]
        public EventCallback<SettingsModel> SettingsChanged { get; set; }

        #endregion

        #region Inject

        [Inject]
        IRepository Repository { get; set; } = null!;

        [Inject]
        public IInventoryService InventoryService { get; set; }

        [Inject]
        ITextLocalizer<Translations> Localizer { get; set; } = null!;

        #endregion

        #region CascadingParameter

        [CascadingParameter]
        Blazorise.Size Size { get; set; }

        #endregion 

        #endregion

        async Task AddSkuModel()
        {
            if (await validations.ValidateAll())
            {
                SkuModelDto skuModelDto = new()
                {
                    // Id - Autogenerated

                    ItemName = AppModelObject.SkuModelDtoObject.ItemName,
                    Attribute1 = AppModelObject.SkuModelDtoObject.Attribute1,
                    Attribute2 = AppModelObject.SkuModelDtoObject.Attribute2,
                    Attribute3 = AppModelObject.SkuModelDtoObject.Attribute3,
                    Description = AppModelObject.SkuModelDtoObject.Description

                    // GenerateSku - Derived Value
                };

                skuModelDto = await Repository.AddSkuModel(skuModelDto);

                // TODO:
                //AppModelObject.SkuModelDtoList.Add(skuModelDto);

                AppModelObject.SkuModelDtoObject = new();
                validations?.ClearAll();

                AppModelObject.SkuModelDtoList = (List<SkuModelDto>)await InventoryService.GetAll();

                AppModelObject.ItemDtoList = (List<ItemDto>)await InventoryService.GetAllItems();
                AppModelObject.ItemVariationDtoList
                    = (List<ItemVariationDto>)await InventoryService.GetAllItemVariations();

                AppModelObject.SelectedSkuModelDtoList = AppModelObject.SkuModelDtoList;
                AppModelObject.SelectedItemDtoList = AppModelObject.ItemDtoList;
                AppModelObject.SelectedItemVariationDtoList = AppModelObject.ItemVariationDtoList;

                await AppModelObjectChanged.InvokeAsync(AppModelObject);
            }
        }
    }