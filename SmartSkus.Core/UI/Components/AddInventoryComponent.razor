@using SmartSkus.Core.Local.Models;
@using SmartSkus.Shared.Dtos;

<Validations @ref="validations" Mode="ValidationMode.Manual">
    <Validation Validator="ValidateSku">
        <Field Margin=Margin.Is0.Is2.FromTop>
            <FieldLabel Margin=Margin.Is0>@Localizer["SKU Code"]:</FieldLabel>
            <TextEdit @bind-Text="@AppModelObject.SkuModelDtoObject.GenerateSku">
                <Feedback>
                    <ValidationError>InValid SKU.<br /> Please enter valid SKU, Ex: 00-00-00-00</ValidationError>
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>

    <Field>
        <FieldLabel Margin=Margin.Is0>@Localizer["Description"]:</FieldLabel>
        <TextEdit @bind-Text="@AppModelObject.SkuModelDtoObject.Description">
        </TextEdit>
    </Field>
       
    
        <Field>
            <FieldLabel Margin=Margin.Is0>@Localizer["Quantity"]:</FieldLabel>
        <NumericEdit @bind-Value="@AppModelObject.SkuModelDtoObject.Quantity">
                <Feedback>
                    <ValidationError>Quantity is Required</ValidationError>
                </Feedback>
            </NumericEdit>
        </Field>
    

    <Button Color=Color.Primary Size="Size" Block=true Margin=Margin.Is2.FromTop @onclick=AddItem>
        @Localizer["Add / Update Inventory"]
    </Button>
</Validations>

@code {

    Validations? validations;

    void ValidateQuantity(ValidatorEventArgs e)
    {
        //if ((long)e.Value == 0)
        //{
        //    e.Status = ValidationStatus.Error;
        //}
        //else
        //{
        //    e.Status = ValidationStatus.Success;
    //}
    }

    void ValidateSku(ValidatorEventArgs e)
    {
        var sku = Convert.ToString(e.Value);
        if (sku.Length < 2)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

}

@code
    {
        #region Variables

        #region Parameter

        [Parameter]
        public AppModel AppModelObject { get; set; } = null!;

        [Parameter]
        public EventCallback<AppModel> AppModelObjectChanged { get; set; }

        [Parameter]
        public SettingsModel Settings { get; set; } = null!;

        //[Parameter]
        //public EventCallback<SettingsModel> SettingsChanged { get; set; }

        //[Parameter]
        //public IEnumerable<SkuModelDto>? Message { get; set; }

        #endregion

        #region Inject

        [Inject]
        ITextLocalizer<Translations> Localizer { get; set; } = null!;

        [Inject]
        IRepository Repository { get; set; } = null!;

        [Inject]
        public IInventoryService? InventoryService { get; set; }

        [Inject]
        public IMasterService? MasterService { get; set; }

        #endregion

        #region CascadingParameter

        [CascadingParameter]
        Blazorise.Size Size { get; set; }

        #endregion

        #endregion

        protected override async Task OnInitializedAsync()
        {
            await Task.Delay(0);
        }

        public async Task AddItem()
        {
            if (await validations.ValidateAll())
            {
                SkuModelDto skuModelDto = new()
                {
                    // Id - Autogenerated

                    ItemName = AppModelObject.SkuModelDtoObject.GenerateSku,
                    Attribute1 = AppModelObject.SkuModelDtoObject.Attribute1,
                    Attribute2 = AppModelObject.SkuModelDtoObject.Attribute2,
                    Attribute3 = AppModelObject.SkuModelDtoObject.Attribute3,

                    Description = AppModelObject.SkuModelDtoObject.Description,
                    Quantity = AppModelObject.SkuModelDtoObject.Quantity,

                    GenerateSku = AppModelObject.SkuModelDtoObject.GenerateSku
                };

                skuModelDto = await Repository.AddSkuModel(skuModelDto);

                AppModelObject.SkuModelDtoList.Add(skuModelDto);

                AppModelObject.SkuModelDtoObject = new();
                validations?.ClearAll();

                AppModelObject.SkuModelDtoList = (List<SkuModelDto>)await InventoryService.GetAll();

                AppModelObject.ItemDtoList = (List<ItemDto>)await InventoryService.GetAllItems();
                AppModelObject.ItemVariationDtoList
                    = (List<ItemVariationDto>)await InventoryService.GetAllItemVariations();

                AppModelObject.SelectedSkuModelDtoList = AppModelObject.SkuModelDtoList;
                AppModelObject.SelectedItemDtoList = AppModelObject.ItemDtoList;
                AppModelObject.SelectedItemVariationDtoList = AppModelObject.ItemVariationDtoList;

                await AppModelObjectChanged.InvokeAsync(AppModelObject);
            }
        }
    }