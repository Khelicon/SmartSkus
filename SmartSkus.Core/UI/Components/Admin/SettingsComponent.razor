@using Microsoft.JSInterop;
@inject IJSRuntime jsRuntime

<Div Display=Display.Flex>
    <h4 class="d-inline-block">@Localizer["Admin - Settings"]</h4>
    @*<Button Class="shadow-none" Margin=Margin.Is0.OnY.IsAuto.FromStart Padding=Padding.Is0 @onclick="ShowMainScreen">
        <Icon Class="fa-fw" Name="IconName.Times" />
    </Button>*@
</Div>

@if (Action == null)
{
    <Row>
        <Column Display=Display.Flex Border=Border.Is1.OnTop.Primary>
            <Button Class="shadow-none" Color="Color.Primary"
                Size="Size"
                Margin=Margin.Is1.OnY.IsAuto.FromEnd
                Padding=Padding.Is0.Is1.OnX @onclick="OpenNew">
                <Icon Class="fa-fw" Name="IconName.Add" /> @Localizer["Create New"]
            </Button>
        </Column>
        @*<Column Display=Display.Flex Border=Border.Is1.OnTop.Primary>
            <Button Class="shadow-none" Color="Color.Danger"
                Size="Size"
                Margin=Margin.Is1.OnY.IsAuto.FromStart
                Padding=Padding.Is0.Is1.OnX
                @onclick="DeleteAll">
                <Icon Class="fa-fw" Name="IconName.Delete" /> Delete All
            </Button>
        </Column>*@
    </Row>
}
else
{
    <Row>
        <Column Display=Display.Flex Border=Border.Is1.OnTop.Primary>
            <Button Class="shadow-none" Color="Color.Primary"
                Size="Size"
                Margin=Margin.Is1.OnY.IsAuto.FromStart
                Padding=Padding.Is0.Is1.OnX
                @onclick="OpenHome">
                <Icon Class="fa-fw" Name="IconName.StepBackward" />@Localizer["Back to List"]
            </Button>
        </Column>
    </Row>
}

@if (Id > 0)
{
    editItem = settingsDtos.Single(i => i.Id == Id);
}

@if (settingsDtos == null)
{
    <p><em>Loading...</em></p>
}
else if (Action == "Create")
{
    <h1>@Localizer["Create"]t</h1>
    <hr />

    <div>
        <dl class="row">

            <dt class="col-sm-2">
                Id
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="newSettingsObject.Id" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>

            <dt class="col-sm-2">
                Name
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="newSettingsObject.Name" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>

            <dt class="col-sm-2">
                SelectedBackupFormat
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="newSettingsObject.SelectedBackupFormat" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>

            <dt class="col-sm-2">
                Culture
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="newSettingsObject.Culture" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>

            <dt class="col-sm-2">
                Theme
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="newSettingsObject.Theme" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>
            <dt class="col-sm-2">
                Background
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="newSettingsObject.Background" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>

        </dl>

        <button class="btn btn-success" @onclick="AddItem">
            <Icon Class="fa-fw" Name="IconName.Add" />
            @Localizer["Add"]
        </button>

    </div>
}
else if (Action == "Edit")
{
    <h5>
        @Localizer["Edit"]
    </h5>

    <hr />

    <div>
        <dl class="row">
            <dt class="col-sm-2">
                Id
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    @*<input @bind="editItem.Id" />*@
                    <label>@editItem.Id</label>
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>
            <dt class="col-sm-2">
                Name
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="editItem.Name" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>

            <dt class="col-sm-2">
                SelectedBackupFormat
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="editItem.SelectedBackupFormat" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>

            <dt class="col-sm-2">
                Culture
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="editItem.Culture" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>
            <dt class="col-sm-2">
                Theme
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="editItem.Theme" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>
            <dt class="col-sm-2">
                Theme
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="editItem.Theme" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>
            <dt class="col-sm-2">
                Background
            </dt>
            <dd class="col-sm-12">
                <div class="form-group">
                    <input @bind="editItem.Background" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </dd>
        </dl>
        <div class="form-group">
            <button class="btn btn-primary" @onclick="UpdateItem">
                <Icon Class="fa-fw" Name="IconName.Save" />
                @Localizer["Save"]
            </button>
        </div>
    </div>
}
else if (Action == "Details")
{
    <h5>
        @Localizer["Details"]
    </h5>
    <hr />
    <br />
    <div>
        <dl class="row">

            <dt class="col-sm-2">
                Id
            </dt>
            <dd class="col-sm-10">
                @editItem.Id
            </dd>

            <dt class="col-sm-2">
                Name
            </dt>
            <dd class="col-sm-10">
                @editItem.Name
            </dd>

            <dt class="col-sm-2">
                SelectedBackupFormat
            </dt>
            <dd class="col-sm-10">
                @editItem.SelectedBackupFormat
            </dd>

            <dt class="col-sm-2">
                Culture
            </dt>
            <dd class="col-sm-10">
                @editItem.Culture
            </dd>
            <dt class="col-sm-2">
                Theme
            </dt>
            <dd class="col-sm-10">
                @editItem.Theme
            </dd>
            <dt class="col-sm-2">
                Background
            </dt>
            <dd class="col-sm-10">
                @editItem.Background
            </dd>
        </dl>
    </div>
}
else if (Action == "Delete")
{
    <h1>@Localizer["Delete"]</h1>
    <hr />

    <h3>@Localizer["Are you sure you want to delete this?"]</h3>

    <div>
        <hr />
        <dl class="row">

            <dt class="col-sm-2">
                Id
            </dt>
            <dd class="col-sm-10">
                @editItem.Id
            </dd>

            <dt class="col-sm-2">
                Name
            </dt>
            <dd class="col-sm-10">
                @editItem.Name
            </dd>

            <dt class="col-sm-2">
                SelectedBackupFormat
            </dt>
            <dd class="col-sm-10">
                @editItem.SelectedBackupFormat
            </dd>

            <dt class="col-sm-2">
                Culture
            </dt>
            <dd class="col-sm-10">
                @editItem.Culture
            </dd>
            <dt class="col-sm-2">
                Theme
            </dt>
            <dd class="col-sm-10">
                @editItem.Theme
            </dd>
            <dt class="col-sm-2">
                Background
            </dt>
            <dd class="col-sm-10">
                @editItem.Background
            </dd>
        </dl>
    </div>
    <div>
        <button class="btn btn-danger"
            @onclick="@(async () => await DeleteItem(editItem.Id))">
            <Icon Class="fa-fw" Name="IconName.Delete" />
            @Localizer["Delete"]
        </button>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>

                <th>Id</th>

                <th>Name</th>

                <th>SelectedBackupFormat</th>

                <th>Culture</th>

                <th>Theme</th>

                <th>Background</th>

                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in settingsDtos)
            {
                <tr>

                    <td>@item.Id</td>

                    <td>@item.Name</td>

                    <td>@item.SelectedBackupFormat</td>

                    <td>@item.Culture</td>
                    <td>@item.Theme</td>
                    <td>@item.Background</td>

                    <td>
                        <Row>
                            <Column Display=Display.Flex>

                                <Button Class="shadow-none" Color="Color.Primary"
                                Size="Size"
                                Margin=Margin.Is1.OnY.IsAuto.FromStart
                                Padding=Padding.Is0.Is1.OnX value="{item.Id}" @onclick="() => OpenEdit(item.Id)">
                                    <Icon Class="fa-fw" Name="IconName.Edit" /> @Localizer["Edit"]
                                </Button>

                                <Button Class="shadow-none" Color="Color.Primary"
                                Size="Size"
                                Margin=Margin.Is1.OnY.IsAuto.FromStart
                                Padding=Padding.Is0.Is1.OnX value="{item.Id}" @onclick="() => OpenDetails(item.Id)">
                                    <Icon Class="fa-fw" Name="IconName.Info" /> @Localizer["View"]
                                </Button>

                                <Button Class="shadow-none" Color="Color.Primary"
                                Size="Size"
                                Margin=Margin.Is1.OnY.IsAuto.FromStart
                                Padding=Padding.Is0.Is1.OnX value="{item.Id}" @onclick="() => OpenDelete(item.Id)">
                                    <Icon Class="fa-fw" Name="IconName.Delete" /> @Localizer["Delete"]
                                </Button>

                            </Column>
                        </Row>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public string? Action { get; set; }

    [Parameter]
    public long? Id { get; set; }

    async Task OpenHome()
    {
        Action = null;
        Id = null;

        await Task.Delay(0);
    }

    async Task OpenNew()
    {
        Action = "Create";
        Id = null;

        await Task.Delay(0);
    }

    async Task OpenEdit(long id)
    {
        Action = "Edit";
        Id = id;

        await Task.Delay(0);
    }

    async Task OpenDetails(long id)
    {
        Action = "Details";
        Id = id;

        await Task.Delay(0);
    }

    async Task OpenDelete(long id)
    {
        Action = "Delete";
        Id = id;

        await Task.Delay(0);
    }

    Blazorise.Size Size => Repository.Settings.Size;

    string Theme => Repository.Settings.Theme;

    int _workaround;

    async Task OnSizeChanged(Blazorise.Size size)
    {
        //Repository.Settings.Size = size;
        //await Repository.UpdateSettings(Repository.Settings.Id);

        await Task.Delay(0);
    }

    async Task OnThemeChanged(string theme)
    {
        _workaround = 1 - _workaround;

        //Repository.Settings.Theme = theme;
        //await Repository.UpdateSettings(Repository.Settings.Id);

        await Task.Delay(0);
    }
}


    @code
    {
        #region Variables and Properties

        #region Inject

        [Inject]
        ITextLocalizer<Translations> Localizer { get; set; } = null!;

        [Inject]
        IRepository Repository { get; set; } = null!;

        [Inject]
        public ISettingsService? SettingsService { get; set; }

        #endregion

        public IEnumerable<SettingsDto> settingsDtos { get; set; } = new List<SettingsDto>();

        public SettingsDto? editItem { get; set; }

        public SettingsDto newSettingsObject { get; set; } = new();

		#endregion

		protected override async Task OnInitializedAsync()
        {
            settingsDtos = await SettingsService.GetAll();
        }

        async Task ShowMainScreen()
        {
            Repository.Settings.Screen = Screen.Main;
            await Repository.UpdateSettings(Repository.Settings.Id);
			
		}

        public async Task AddItem()
        {
            await SettingsService.Create(newSettingsObject);

            newSettingsObject = new();

            settingsDtos = await SettingsService.GetAll();

            //MyNavigationManager.NavigateTo("admin/category");

            Action = null;
            Id = null;
        }

        public async Task UpdateItem()
        {
            if (editItem is not null)
            {
                await SettingsService.Update(editItem);
            }

            settingsDtos = await SettingsService.GetAll();

            //MyNavigationManager.NavigateTo("admin/category");

            Action = null;
            Id = null;
        }

        public async Task DeleteItem(long id)
        {
            await SettingsService.Delete(id);

            settingsDtos = await SettingsService.GetAll();
            //MyNavigationManager.NavigateTo("admin/category");

            Action = null;
            Id = null;
        }

        //public async Task DeleteAll()
        //{
        //    bool confirmCancel = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to Delete All?");
        //    if (confirmCancel)
        //    {
        //        await SettingsService.DeleteAll();

        //        settingsDtos = await SettingsService.GetAll();

        //        Action = null;
        //        Id = null;
        //    }
        //}
    }