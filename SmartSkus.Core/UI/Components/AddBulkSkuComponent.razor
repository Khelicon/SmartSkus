@using SmartSkus.Core.Local.Models;
@using SmartSkus.Shared.Dtos;

<Validations @ref="validations" Mode="ValidationMode.Manual">
    <Validation Validator="ValidateSku">
        <Field Margin=Margin.Is0.Is2.FromTop>
            <FieldLabel Margin=Margin.Is0>@Localizer["Item Name"]:</FieldLabel>
            <TextEdit @bind-Text="@AppModelObject.BulkAddDtoObject.SKU">
                <Feedback>
                    <ValidationError>Item Name should more than 2 characters.</ValidationError>
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>

    <Validation Validator="@ValidationRule.IsNotEmpty">
        <Field>
            <FieldLabel Margin=Margin.Is0>@Localizer["Description"]:</FieldLabel>
            <TextEdit @bind-Text="@AppModelObject.BulkAddDtoObject.Description">
                <Feedback>
                    <ValidationError>Description is Required</ValidationError>
                </Feedback>
            </TextEdit>
        </Field>
    </Validation>

    <Validation Validator="ValidateQuantity">
        <Field>
            <FieldLabel Margin=Margin.Is0>@Localizer["Quantity"]:</FieldLabel>
            <NumericEdit @bind-Value="@AppModelObject.BulkAddDtoObject.Quantity">
                <Feedback>
                    <ValidationError>Quantity is Required</ValidationError>
                </Feedback>
            </NumericEdit>
        </Field>
    </Validation>

    <FieldLabel Margin=Margin.Is0>@Localizer["Category"]:</FieldLabel>

    @if (Categories == null)
    {
        <p>
            <em>Loading ...</em>
        </p>
    }
    else
    {
        <Select TValue="int" SelectedValue="@selectedValue" SelectedValueChanged="@OnSelectedValueChanged">
            <SelectItem selected="0">(Choose Category)</SelectItem>
            @foreach (var cat in Categories)
            {
                <SelectItem value="@cat.CategoryID">@cat.Title</SelectItem>
            }
        </Select>
    }

    @code
    {
        private bool HideLabel { get; set; } = true;
        int selectedValue;

        Task OnSelectedValueChanged(int value)
        {
        selectedValue = value;
        Console.WriteLine(selectedValue);

        CategoryID = value;

        AppModelObject.BulkAddDtoObject.CategoryId = CategoryID;

        OptionKeys = (from cok in CategoryOptionKeys
        .Where(s => s.CategoryID == CategoryID)
                      select cok.OptionKey).ToList();

        ////for serialization
        string serializedOptionKey = System.Text.Json.JsonSerializer.Serialize(OptionKeys);
        ////for deserialization
        ////User userCopy = System.Text.Json.JsonSerializer.Deserialize<User>(serializedString);

        Console.WriteLine(serializedOptionKey);
        Console.WriteLine(" - It is definitely: " + value.ToString());

        CheckCustomValidations();

        return Task.CompletedTask;
        }
    }

    @if (OptionKeys.Count() > 0)
    {
        <br />

        <FieldLabel Margin=Margin.Is0>@Localizer["Options"]:</FieldLabel>

        <br />
    }

    <style>
        .checkBoxStyle::before {
            position: inherit;
        }
    </style>

    @foreach (var item in OptionKeys)
    {
        <label>
            @item.KeyName
            <input type="checkbox" class="checkBoxStyle" style=""
               @bind="item.ShowOptionValues" @onclick="(()=>handleClick(item))" />
        </label>
        <br />
    }

    <br />

    @foreach (var item in OptionKeys.Where(x => x.ShowOptionValues))
    {
        var temp = (from s in OptionValues
        .Where(s => s.OptionKeyID == item.OptionKeyID)
                    select s.Value).ToList();

        <p>@($"{item.KeyName}({string.Join(",", temp.ToArray())})")</p>
    }

    <p hidden=@HideLabel style="color:red">Category & atleast one Options selection is requied</p>

    <Button Color=Color.Primary Size="Size" Block=true Margin=Margin.Is2.FromTop @onclick=AddBulkData>
        @Localizer["Add Bulk Data"]
    </Button>
</Validations>

@functions {

    void DoStuff(ChangeEventArgs e)
    {
        CategoryID = (int)Convert.ToDouble(e.Value);

        AppModelObject.BulkAddDtoObject.CategoryId = CategoryID;

        OptionKeys = (from cok in CategoryOptionKeys
            .Where(s => s.CategoryID == CategoryID)
                      select cok.OptionKey).ToList();

        ////for serialization
        string serializedOptionKey = System.Text.Json.JsonSerializer.Serialize(OptionKeys);
        ////for deserialization
        ////User userCopy = System.Text.Json.JsonSerializer.Deserialize<User>(serializedString);

        Console.WriteLine(serializedOptionKey);
        Console.WriteLine(" - It is definitely: " + e.Value.ToString());
    }
}

@code {

    Validations validations;

    private void handleClick(OptionKeyDto item)
    {
        if (!item.ShowOptionValues)
        {
            bulkAdd.Add(item.OptionKeyID);
        }
        else
        {
            bulkAdd.Remove(item.OptionKeyID);
        }

        CheckCustomValidations();
    }

    void ValidateQuantity(ValidatorEventArgs e)
    {
        if ((int)e.Value <= 0)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void ValidateSku(ValidatorEventArgs e)
    {
        var sku = Convert.ToString(e.Value);
        if (sku.Length < 2)
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
}

@code
    {
        #region Variables

        #region Parameter

        [Parameter]
        public AppModel AppModelObject { get; set; } = null!;

        [Parameter]
        public EventCallback<AppModel> AppModelObjectChanged { get; set; }

        [Parameter]
        public SettingsModel Settings { get; set; } = null!;

        [Parameter]
        public EventCallback<SettingsModel> SettingsChanged { get; set; }

        [Parameter]
        public IEnumerable<SkuModelDto>? Message { get; set; }

        #endregion

        #region Inject

        [Inject]
        ITextLocalizer<Translations> Localizer { get; set; } = null!;

        [Inject]
        IRepository Repository { get; set; } = null!;

        [Inject]
        public IInventoryService? InventoryService { get; set; }

        [Inject]
        public IMasterService? MasterService { get; set; }

        #endregion

        #region CascadingParameter

        [CascadingParameter]
        Blazorise.Size Size { get; set; }

        #endregion

        #region Enumerable & List

        public List<long> bulkAdd = new();

        public IEnumerable<SkuModelDto> Skus { get; set; } = new List<SkuModelDto>();

        public IEnumerable<CategoryDto> Categories { get; set; } = new List<CategoryDto>();

        public IEnumerable<OptionKeyDto> OptionKeys { get; set; } = new List<OptionKeyDto>();

        public IEnumerable<OptionValueDto> OptionValues { get; set; } = new List<OptionValueDto>();

        public IEnumerable<CategoryOptionKeyDto> CategoryOptionKeys { get; set; } = new List<CategoryOptionKeyDto>(); 

        #endregion

        public int OptionKeyID;
        public int CategoryID;

        public BulkAddDto newBulkAddObject { get; set; } = new();

        #endregion

        protected override async Task OnInitializedAsync()
        {
            if(MasterService != null)
            {
                CategoryOptionKeys = await MasterService.GetAllCategoryOptionKey();
                Categories = await MasterService.GetAllCategory();
                OptionValues = await MasterService.GetAllOptionValue();
            }

            if (InventoryService != null)
            {
                Skus = await InventoryService.GetAll();
            }
        }

        public async Task AddItem()
        {
            if (OptionKeyID != 0)
            {
                bulkAdd.Add(OptionKeyID);
            }
            newBulkAddObject.OptionKeyIds = bulkAdd;
            newBulkAddObject.CategoryId = CategoryID;
            await InventoryService.Add(newBulkAddObject);

            newBulkAddObject = new();

            Message = await InventoryService.GetAll();

            //MyNavigationManager.NavigateTo("/inventory");
            //await BlazoredModal.CloseAsync(ModalResult.Ok(Message));
        }

        bool CheckCustomValidations()
        {
            if ((AppModelObject.BulkAddDtoObject.CategoryId <= 0) || (bulkAdd.Count == 0))
            {
                HideLabel = false;

                return false;
            }
            else
            {
                HideLabel = true;

                return true;
            }
        }

        async Task AddBulkData()
        {
            if (await validations.ValidateAll())
            {
                if (!CheckCustomValidations())
                {
                    return;
                }

                if (OptionKeyID != 0)
                {
                    bulkAdd.Add(OptionKeyID);
                }

                BulkAddDto bulkAddDto = new()
                {
                    SKU = AppModelObject.BulkAddDtoObject.SKU,
                    Description = AppModelObject.BulkAddDtoObject.Description,
                    Quantity = AppModelObject.BulkAddDtoObject.Quantity,
                    OptionKeyIds = bulkAdd, //new List<long>() { 2,3, 4},
                    CategoryId = AppModelObject.BulkAddDtoObject.CategoryId

                };

                AppModelObject.SkuModelDtoList = await Repository.AddBulkSkus(bulkAddDto);

                AppModelObject.BulkAddDtoObject = new();
                bulkAdd = new();
                selectedValue = 0;
                OptionKeys = new List<OptionKeyDto>();
                ////OptionValues = new List<OptionValueDto>();
                validations?.ClearAll();

                AppModelObject.ItemDtoList = (List<ItemDto>)await InventoryService.GetAllItems();
                AppModelObject.ItemVariationDtoList
                    = (List<ItemVariationDto>)await InventoryService.GetAllItemVariations();

                AppModelObject.SelectedSkuModelDtoList = AppModelObject.SkuModelDtoList;
                AppModelObject.SelectedItemDtoList = AppModelObject.ItemDtoList;
                AppModelObject.SelectedItemVariationDtoList = AppModelObject.ItemVariationDtoList;

                await AppModelObjectChanged.InvokeAsync(AppModelObject);
            }
            else
            {
                CheckCustomValidations();
            }
        }
    }