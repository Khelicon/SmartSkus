@*https://stackoverflow.com/questions/28283042/how-do-i-insert-spaces-within-a-razor-code-block*@

<style>
    .checkBoxStyle::before {
        position: inherit;
    }
</style>

<div class="custom-control custom-checkbox">
    <input @ref=_elementReference class="custom-control-input checkBoxStyle" id="@_elementId" type="checkbox" checked="@_internalChecked" @onchange="OnChange" /> <text>&nbsp;&nbsp;</text>
    <label class="custom-control-label" for="@_elementId">@ChildContent</label>
</div>

@code
{
    #region Variables

    #region Parameter

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsTriState { get; set; }

    [Parameter]
    public bool? Checked { get; set; }

    [Parameter]
    public EventCallback<bool?> CheckedChanged { get; set; }

    #endregion

    #region Inject

    [Inject]
    JsInterop JsInterop { get; set; } = null!;

    #endregion

    private bool _internalChecked;

    private bool _isIndeterminate;

    private ElementReference _elementReference;

    private readonly string _elementId = Guid.NewGuid().ToString(); 

    #endregion

    protected override void OnParametersSet()
    {
        SetInternalChecked();
    }

    private void SetInternalChecked()
    {
        _internalChecked = Checked != false;
    }

    private async Task SetIndeterminate()
    {
        bool indeterminate = Checked is null;

        if (_isIndeterminate != indeterminate)
        {
            _isIndeterminate = indeterminate;

            await JsInterop.SetElementProperty(_elementReference, "indeterminate", indeterminate);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await SetIndeterminate();
    }

    private async Task ChangeChecked()
    {
        if (IsTriState)
        {
            Checked = Checked switch
            {
                false => true,
                true => null,
                null => false,
            };
        }
        else
        {
            Checked = !Checked;
        }

        await CheckedChanged.InvokeAsync(Checked);
    }

    private async Task OnChange(ChangeEventArgs e)
    {
        await ChangeChecked();

        SetInternalChecked();

        await SetIndeterminate();
    }
}